@model _360LawGroup.CostOfSalesBilling.Models.ClientViewModel
@{
    var subscriptionbasislist = ViewBag.SubscrptionBasisList as List<string>;
}
<div id="AddEditModal" class="modal fade" role="dialog" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog" style="min-width:85%;">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">
                    @if (Model.Id == Guid.Empty)
                    {
                        <span>Create Client</span>
                    }
                    else
                    {
                        <span>Edit Client</span>

                    }
                </h4>
            </div>
            @using (Ajax.BeginForm("", "", null,
            new AjaxOptions
            {
                HttpMethod = "POST",
                Url = ViewBag.ApiUrl + "api/common/client/" + (Model.Id == Guid.Empty ? "create" : "edit"),
                OnSuccess = "ClientDataSuccess",
                OnFailure = "Failed"
            }, new { @class = "form-horizontal", role = "form" }
             ))
            {
                @Html.HiddenFor(x => x.Id)
                @Html.ValidationMessageFor(model => model.Id)

                <div class="modal-body">
                    <div class="form-group">
                        <div class="col-md-4">
                            @Html.RequiredLabelFor(m => m.Company, new { @class = "control-label text-bold" })
                            @Html.TextBoxFor(model => model.Company, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Company)
                        </div>
                        <div class="col-md-4">
                            @Html.RequiredLabelFor(m => m.Address, new { @class = "control-label text-bold" })
                            @Html.TextBoxFor(model => model.Address, new { @class = "form-control", @placeholder = "Enter Location" })
                            @Html.ValidationMessageFor(model => model.Address)
                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(m => m.IsSubscription, new { @class = "control-label text-bold" })

                            @Html.DropDownListFor(model => model.IsSubscription,
                                     new List<SelectListItem>
                                     {
                                       new SelectListItem { Text="Yes", Value="True"},
                                       new SelectListItem { Text="No", Value="False"}
                                     }
                                     , new { @class = "form-control", @data_keyboard = "false", @data_value = Model.IsSubscription }
                                     )
                            @Html.ValidationMessageFor(model => model.IsSubscription)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-4">
                            @Html.RequiredLabelFor(m => m.FullName, new { @class = "control-label text-bold" })
                            <div class="row">
                                <div class="col-md-6">
                                    @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control col-md-2", @placeholder = "First Name" })
                                    @Html.ValidationMessageFor(model => model.FirstName)
                                </div>
                                <div class="col-md-6">
                                    @Html.TextBoxFor(model => model.LastName, new { @class = "col-md-2 form-control", @placeholder = "Last Name" })
                                    @Html.ValidationMessageFor(model => model.LastName)
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            @Html.RequiredLabelFor(m => m.AddressLIne2, new { @class = "control-label" })
                            @Html.TextBoxFor(model => model.AddressLIne2, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.AddressLIne2)

                        </div>
                        <div class="col-md-4">
                            @{
                                string v = (!string.IsNullOrEmpty(Model.SubscriptionBasis) ? Newtonsoft.Json.JsonConvert.SerializeObject(Model.SubscriptionBasis.Split(',')) : default(string));
                            }
                            @Html.LabelFor(m => m.SubscriptionBasis, new { @class = "control-label text-bold" })
                            @Html.DropDownListFor(m => m.SubscriptionBasis, new SelectList(subscriptionbasislist), new { @class = "form-control target-value", @data_tags = "true", @data_value = v, @data_keyboard = "false" })
                            @Html.ValidationMessageFor(model => model.SubscriptionBasis)

                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-4">
                            @Html.RequiredLabelFor(m => m.Email, new { @class = "control-label text-bold" })
                            @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Email)
                        </div>
                        <div class="col-md-4">
                            @Html.RequiredLabelFor(m => m.City, new { @class = "control-label" })
                            @Html.TextBoxFor(model => model.City, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.City)
                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(m => m.PaymentMonths, new { @class = "control-label text-bold" })
                            @Html.TextBoxFor(model => model.PaymentMonths, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.PaymentMonths)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-4">
                            @Html.RequiredLabelFor(m => m.JobTitle, new { @class = "control-label text-bold" })
                            @Html.TextBoxFor(model => model.JobTitle, new { @class = "form-control" })
                        </div>
                        <div class="col-md-4">
                            @Html.RequiredLabelFor(m => m.Region, new { @class = "control-label" })
                            @Html.TextBoxFor(model => model.Region, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Region)
                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(m => m.MonthlySubscription, new { @class = "control-label text-bold" })
                            @Html.TextBoxFor(model => model.MonthlySubscription, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.MonthlySubscription)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-4">
                            @Html.RequiredLabelFor(m => m.BusinessPhone, new { @class = "control-label text-bold" })
                            @Html.TextBoxFor(model => model.BusinessPhone, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.BusinessPhone)
                        </div>
                        <div class="col-md-4">
                            @Html.RequiredLabelFor(m => m.PinCode, new { @class = "control-label" })
                            @Html.TextBoxFor(model => model.PinCode, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.PinCode)
                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(m => m.SubscriptionDate, new { @class = "control-label text-bold" })
                            @Html.TextBoxFor(model => model.SubscriptionDate, "{0:dd-MM-yyyy}", new { @class = "form-control Dateofcal", @data_value = Model.SubscriptionDate })
                            @Html.ValidationMessageFor(model => model.SubscriptionDate)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-4">
                            @Html.RequiredLabelFor(m => m.FaxNumber, new { @class = "control-label text-bold" })
                            @Html.TextBoxFor(model => model.FaxNumber, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.FaxNumber)

                        </div>
                        <div class="col-md-4">
                            @Html.RequiredLabelFor(m => m.Country, new { @class = "control-label" })
                            @Html.TextBoxFor(model => model.Country, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Country)

                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(m => m.MemberChargeRate, new { @class = "control-label text-bold" })
                            @Html.TextBoxFor(model => model.MemberChargeRate, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.MemberChargeRate)

                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-4">
                            @Html.RequiredLabelFor(m => m.MobileNumber, new { @class = "control-label text-bold" })
                            @Html.TextBoxFor(model => model.MobileNumber, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.MobileNumber)
                        </div>
                        <div class="col-md-4">
                            @Html.RequiredLabelFor(m => m.ContractedCountries, new { @class = "control-label text-bold" })
                            @Html.TextBoxFor(model => model.ContractedCountries, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.ContractedCountries)
                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(m => m.PrivateClientChargeRate, new { @class = "control-label text-bold" })
                            @Html.TextBoxFor(model => model.PrivateClientChargeRate, new { @class = "form-control"})
                            @Html.ValidationMessageFor(model => model.PrivateClientChargeRate)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-4">
                            @Html.RequiredLabelFor(m => m.ContractRenewalDate, new { @class = "control-label text-bold" })
                            @Html.TextBoxFor(model => model.ContractRenewalDate, "{0:dd-MM-yyyy}", new { @class = "form-control Dateofcal", @data_value = Model.ContractRenewalDate })
                            @Html.ValidationMessageFor(model => model.ContractRenewalDate)
                        </div>
                        <div class="col-md-4">
                            @Html.RequiredLabelFor(m => m.LitigationChargeRate, new { @class = "control-label text-bold" })
                            @Html.TextBoxFor(model => model.LitigationChargeRate, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.LitigationChargeRate)

                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(m => m.RegulatedChargeRate, new { @class = "control-label text-bold" })
                            @Html.TextBoxFor(model => model.RegulatedChargeRate, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.RegulatedChargeRate)

                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-4">
                            @Html.RequiredLabelFor(m => m.Notes, new { @class = "control-label text-bold" })
                            @Html.TextAreaFor(model => model.Notes, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Notes)

                        </div>
                        <div class="col-md-4">
                            @Html.RequiredLabelFor(m => m.Attechments, new { @class = "control-label text-bold" })
                            <input class="input is-file" id="field_212_upload" value="" type="file" name="files" data-url="https://eu-api.knack.com/v1/applications/5b7545f8af8d387ae632df83/assets/file/upload">
                            <div class="kn-spinner" style="display:none;"></div>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary">Save</button>
                    <button type="submit" class="btn btn-default" data-dismiss="modal">Back to Manage Clients</button>
                </div>
                                }
        </div>
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        $('.Dateofcal').datePicker({
            min: true
            
        });
        $('.Dateofcal').attr("readonly", true);
        ShowModal("#AddEditModal", function () {
        });
    });


    function ClientDataSuccess(data) {
        if (data.StatusCode === 200) {
            AlertNotify("Success", data.Messages, "bg-success");
            setTimeout(function () {
                window.location.reload();
            }, 800);

        } else {
            PopupDataSuccess(data);
        }
    }
</script>

